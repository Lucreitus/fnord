/**********************************************************************
 * Copyright 1990, Brown University, Providence, RI
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 **********************************************************************/
/**********************************************************************
 * RCH 10/30/90
 *
 * Demonstrate normal plane at point 7 theta cutting surface
 * to produce a curve - normal curvature.
 *
 **********************************************************************/

c := widget Slider( 0, 4 ), drag<-False, name<-"which surface";
d := ToZ(c);

Surf
   := R^2 -> R^3
   : [u,v] -> [ cos(u)(1.5+cos(v)), sin(u)(1.5+cos(v)), sin(v) ]  if d = 0 else
              [ -cos(u)cos(v), -sin(u)cos(v), sin(v) ]            if d = 1 else
              [ u, v, (u*u - 2*v*v) ] 			          if d = 2 else
              [ cosh(u)*cos(v), cosh(u)*sin(v), u ]	          if d = 3 else
     	      [ sinh(u)*sin(v), -sinh(u)*cos(v), v ]              if d = 4 else
   	      [ cos(u)/v, sin(u)/v, myst(v) ]
   ;

/* need this for mystery surface */
myst := R -> R: t -> -sqrt(v*v-1)/v + ln( v + sqrt(v*v-1) );

/* domains*/
SSurfDom := Patch( (-pi, pi, 20), (-pi, pi, 20 ) )              if d = 0 else 
           Patch( (-pi, pi, 20 ), (-pi/2, pi/2, 20 ) )         if d = 1 else
           Patch( (-1, 1, 10 ), (-1, 1, 10 ) )                 if d = 2 else
           Patch( (-pi/2, pi/2, 20 ), (-pi, pi, 20) )          if d = 3 else
           Patch( (-pi/2, pi/2, 20 ), (-pi/2, pi/2, 20) );
           Patch( (0, 2pi, 20), (1, 
   ;  
TSurfDom := Grid( (-pi, pi, 20), (-pi, pi, 20 ) )              if d = 0 else 
           Grid( (-pi, pi, 20 ), (-pi/2, pi/2, 20 ) )         if d = 1 else
           Grid( (-1, 1, 10 ), (-1, 1, 10 ) )                 if d = 2 else
           Grid( (-pi/2, pi/2, 20 ), (-pi, pi, 20) )          if d = 3 else
           Grid( (-pi/2, pi/2, 20 ), (-pi/2, pi/2, 20) );

st := widget CheckBox, name<-"Solid surface", init<-False;

SurfDom := SSurfDom if st = True else TSurfDom;
	   

x := widget Slider( -pi, pi), init<-0, name<-"u value of anchor point";
y := widget Slider( -pi, pi ), init<-0, name<-"v value of anchor point";
thet := widget Slider( -pi, pi ), init<-0, 
     name<-"theta:rotation angle of plane";
size := widget Slider(0, 4pi), init<-1, name<-"Size of plane";

/* fundamental square to use for cutting plane */
PlaneDom := Patch( (-1, 1, 3), (-1, 1, 3) );

/* mapping on that square to put it where we want */
/* x/y basis vectors for plane */
pX 
   := R^2->R^3
   : v -> Normalize(Surf'(v)^1  + Surf'(v)^2)
   ;
pY 
   := R^2->R^3
   : v -> (pX(v)) >< ((SurfaceNormal Surf)(v))
   ;

PlaneMap
   := R^2 -> R^3
   : [u,v] -> size*v*(SurfaceNormal Surf)([x,y]) /* plane's norm componant */
              + cos(thet)*size*u*pX([x,y])             
   	      + sin(thet)*size*u*pY([x,y])
              + Surf([x,y])                      /* plan'e anchor point */
   ;

/* define parts for red cross hair in domain */
UnitI := Interval( -.5, .5, 2 );

Hcross := R->R^2: t -> [x+t,y];
Vcross := R->R^2: t -> [x,y+t];

myUV := widget type<-`view, name<-"curve in U-V plane";

widget type<-`vobject, set<-( SurfDom ), parent<-`myUV,
   color<-"blue";
widget type<-`vobject, set<-( Hcross UnitI ), parent<-`myUV,
   color<-"red";
widget type<-`vobject, set<-( Vcross UnitI ), parent<-`myUV,
   color<-"red";


mySurf := widget type<-`view, name<-"Surface with mapped curve";

widget type<-`vobject, set<-( Surf SurfDom ), parent<-`mySurf,
   color<-"blue";
widget type<-`vobject, set<-( PlaneMap PlaneDom ), parent<-`mySurf,
   color<-"red";







