/**********************************************************************
 * Copyright 1990, Brown University, Providence, RI
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 **********************************************************************/
/**********************************************************************
 * RCH 10/30/90
 *
 * Demonstrate normal plane at point 7 theta cutting surface
 * to produce a curve - normal curvature.
 *
 **********************************************************************/

c := widget Slider( 0, 2 ), drag<-False, name<-"which surface";
d := ToZ(c);

con := widget Slider( -1, 1 ), init<-0, name<-"constant for surface bump";

Surf
   := R^2 -> R^3
   : [u,v] -> [ u, v, (u*u+2*v*v) ]                               if d = 0 else
              [ u, v, (u*u - 2*v*v) ] 		                  if d = 1 else
   	      [ u, v, (u*u*u - 3*u*v*v) + con * (u*u+v*v) ] 
   ;


/* domains*/
SSurfDom := Patch( (-1, 1, 10 ), (-1, 1, 10 ) )                 if d = 0 else
            Patch( (-1, 1, 10 ), (-1, 1, 10 ) )                 if d = 1 else
            Patch( (-1, 1, 10 ), (-1, 1, 10 ) )                 

   ;  

TSurfDom := Grid( (-1, 1, 10 ), (-1, 1, 10 ) )                 if d = 0 else
            Grid( (-1, 1, 10 ), (-1, 1, 10 ) )                 if d = 1 else
            Grid( (-1, 1, 10 ), (-1, 1, 10 ) )                 

	 ;
st := widget CheckBox, name<-"Solid surface", init<-False;

SurfDom := SSurfDom if st = True else TSurfDom;
	   

x := 0;
y := 0;


thet := widget Slider( -pi, pi ), init<-0, 
     name<-"theta:rotation angle of plane";
size := widget Slider(0, 4pi), init<-1, name<-"Size of plane";

/* fundamental square to use for cutting plane */
PlaneDom := Patch( (-1, 1, 3), (-1, 1, 3) );

/* mapping on that square to put it where we want */
/* x/y basis vectors for plane */
pX 
   := R^2->R^3
   : v -> Normalize(Surf'(v)^1)
   ;
pY 
   := R^2->R^3
   : v -> Normalize(Surf'(v)^2)
   ;

PlaneMap
   := R^2 -> R^3
   : [u,v] -> size*v*(SurfaceNormal Surf)([x,y]) /* plane's norm componant */
              + cos(thet)*size*u*pX([x,y])             
   	      + sin(thet)*size*u*pY([x,y])
              + Surf([x,y])                      /* plan'e anchor point */
   ;

/* define parts for red cross hair in domain */
UnitI := Interval( -.5, .5, 2 );

Hcross := R->R^2: t -> [x+t,y];
Vcross := R->R^2: t -> [x,y+t];

AngLines := R -> R^2: t -> [ x, y ] + 3* t * [ cos(thet), sin(thet) ];

myUV := widget type<-`view, name<-"curve in U-V plane";

widget type<-`vobject, set<-( Axes ), parent<-`myUV,
   color<-"green";
widget type<-`vobject, set<-( AngLines UnitI ), parent<-`myUV,
   color<-"red";


mySurf := widget type<-`view, name<-"Surface with mapped curve";

widget type<-`vobject, set<-( Surf SurfDom ), parent<-`mySurf,
   color<-"blue";
widget type<-`vobject, set<-( PlaneMap PlaneDom ), parent<-`mySurf,
   color<-"red";


InterDom := Interval( -1, 1, 50 );    

ICurve 
   := R-> R^3
   : t -> Surf( [t*cos(thet), t*sin(thet)]  )
   ;

widget type<-`vobject, set<-( ICurve InterDom ), parent<-`mySurf,
   color<-"red";


/* now show curve that intersects the plane */

myCurve := widget type<-`view, name<-"Intersection of plane & surface";

InterDom := Interval( -1, 1, 50 );    

InterCurve 
   := R -> R^2
   : t -> [ t, Surf( [t*cos(thet), t*sin(thet)] )^3 ]
   ;

widget type<-`vobject, set<-( InterCurve InterDom ), parent<-`myCurve,
   color<-"red";
widget type<-`vobject, set<-( Axes ), parent<-`myCurve,
   color<-"green";


Kcurve
   := R -> R
   : t ->InterCurve(t)^2
   ;

/* define */
K :=  Kcurve''(0)/ sqrt(( 1 + Kcurve'(0) * Kcurve'(0) )**3);




Kmark 
   := R -> R^3
   : t -> t/pi *[ cos(thet), sin(thet), 0 ]	if K*K < .01 else
          [ 0, 0, 1/K ] + [ cos(thet)cos(t), sin(thet)cos(t), sin(t) ]/K  
   	;	


MarkDom := Interval( -pi, pi, 20 );


widget type<-`vobject, set<-( Kmark MarkDom ), parent<-`mySurf,
   color<-"white";

Kmark2
   := R -> R^2
   : t -> [ t/pi, 0 ]				 if K*K < .01 else
          [ 0, 1/K ] + [ cos(t), sin(t) ]/K  
   	;	

widget type<-`vobject, set<-( Kmark2 MarkDom ), parent<-`myCurve,
   color<-"white";
