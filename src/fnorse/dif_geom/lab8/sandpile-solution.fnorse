/**********************************************************************
 * Copyright 1990, Brown University, Providence, RI
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 **********************************************************************/
/**********************************************************************
 * RCH 10/22/90
 *
 * Blank script for trying to get the double point & 
 * singularity curves for the ellipse sandpile. 
 * 
 **********************************************************************/

/* domain around ellipse curve */
EllipseDom := Interval( -pi, pi, 60 );
/* domain along V */
Vlen := widget Slider( 0 , 6), init<-4;
VDom := Interval( 0, Vlen, 10 );

/* ration of ellipse axis */
a := widget Slider( 1, 4 ), init<-1.5;

/*
 * formular for base ellipse 
 */
Ellipse 
   := R->R^3
   : t -> [ cos(t), a*sin(t), 0 ]
   ;

/*
 * formular for rule vector for ruled surface
 * (unit vector)
 */
V
   := R -> R^3
   : t -> ( (FrenetNormal Ellipse)(t) + (FrenetBinormal Ellipse)(t) )
          / sqrt(2)
   ;


/*
 * sand pile surface definition 
 * and domain 
 */
Surf
   := R^2->R^3
   : [ t, v ] -> Ellipse(t) + v * V(t)
   ;

SurfDom := [EllipseDom >< VDom ];


/*
 * create the view and put the ellipse & surface in it 
 */

myView := widget type<-`view;

/* surface in pink  */
widget type<-`vobject, parent<-`myView, color<-"blue",
   set<-( Surf SurfDom );

/* ellipse in yellow */
widget type<-`vobject, parent<-`myView, color<-"yellow",
   set<-( Ellipse EllipseDom );

/**********************************************************************
 **********************************************************************
 ** You need to fill in this section!
 **
 ** You need to create one curve & vobject for the singularity curve
 ** (red)
 ** You will need two curves to do the two double point curves. 
 ** (green)
 **
 **********************************************************************
 **********************************************************************/

/* 
 * upper double point curve
 */
double1 
   := R->R^3
   : t -> [cos(t)*(1-a*a), 0, a*sqrt(sin(t)**2+a*a*cos(t)**2) ]
   ;

dbl1Dom  := Interval( -pi, pi, 20 );

widget type<-`vobject, parent<-`myView,
   color<-"green", set<-( double1 dbl1Dom );

/*
 * lower double point curve 
 */
double2
   := R->R^3
   : t -> [ 0, sin(t)*(a-1/a), 1/a*sqrt(sin(t)**2+a*a*cos(t)**2) ]
   ;

dbl2Dom  := Interval( -pi, pi, 20 );

widget type<-`vobject, parent<-`myView,
   color<-"green", set<-( double2 dbl2Dom );*


/*
 * singular point curve
 */
sing 
   := R->R^3
/*   : t -> [ sin(t)*(1-a*a*sin(t)**2-cos(t)**2), /* old Vector way to do it */
            cos(t)*(a*a-a*a*sin(t)**2-cos(t)**2)/a,
            (sqrt(a*a*sin(t)**2+cos(t)**2)**3)/a ]
*/
   : t -> Ellipse(t) + 1/(Curvature Ellipse)(t) * sqrt(2) * V(t) 
   ;

singDom := Interval( -pi, pi, 100 );

widget type<-`vobject, parent<-`myView,
   color<-"white", set<-( sing singDom );

