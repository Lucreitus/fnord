/****************************************************************
 *
 * Copyright 1990, Brown University, Providence, RI
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 ****************************************************************/

/**********************************************************************
 * twist cubic demo 1.4
 *
 * playing with tangents
 * displaying vectors
 * normalizing vectors
 **********************************************************************/

/*
 * constants
 */
start := -1;     /* range to map */
stop := 1;

/* 
 * define a domain that is small enough that we 
 * can see what is going on near the origin
 */
dom := Interval( start, stop, 60 );

sparseDom := Interval( start, stop, 15 );
/* use fewer points so we can see individual vectors */

/*
 * define the twisted cubic in 3-space 
 */
tcube	:=
	R -> R^3 :
	t -> [ t, t**2, t**3 ];

/*
 * now well add a new mapping that takes a vector
 * in 3-space and "normalizes" it - that is, divides it by it's 
 * length
 * 
 * use vector operations:
 *  length = square root of dot product w/ self
 */
makeNorm :=
	R^3 -> R^3:
	vec -> vec / sqrt( vec . vec );

/*
 * to actually draw vectors, we will use a rectangular (2D) 
 * domain. On dimension will be t (same as domain for the regular
 * twisted cubic, only not connected) and the other will be along 
 * the length of the vector. 
 */

vecDom := [sample(sparseDom) >< Interval( 0, 1, 2 ) ];  /* try removing "sample" */


/*
 * Now we need a new function to map this domain.
 */
vecs :=
	R^2 -> R^3 :
	[t, len ] -> [0,0,0] + len * makeNorm(tcube'(t));    /* the 0,0,0 is unnecessary */



/*
 * show results 
 */
widget Show( tcube( dom )	union
	     vecs(vecDom)	union 
 	     Axes
	   );
