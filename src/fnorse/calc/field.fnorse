/**********************************************************************
 * Copyright 1990, Brown University, Providence, RI
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
/**********************************************************************
 *
 * This for vector fields where
 * int(  Mdx + Ndy )
 **********************************************************************/

pic := widget type<-`view, name<-"Vector field with singularity";

St := -2;
Sp := -St;

PDense := 21;
PlaneDom := [sample(interval(St,Sp,PDense))
	      >< sample(interval(St,Sp,PDense))];

VecLen := Interval( 0,1,3 );

FDom := [sample(interval(St,Sp,PDense))
	 >< sample(interval(St,Sp,PDense)) 
	 >< VecLen ];

F := R^2->R
   : [x,y] -> 2(x**2)(y**2) 
  ;

/* X part of field  */
N := R^2 -> R
    : [x,y] -> -y/ (x**2 + y**2 )
  ;

/* Y part of field */	
M := R^2 -> R
    : [x,y] -> x/  (x**2 + y**2 )
  ;

/*scale := widget Slider( 0, 2 ), init<-.1;*/
scale := .1;

/* The actual vector field */
Field1 := R^3->R^3
  : [u,v,t] -> ([u,v,0]) + scale*t*([M([u,v]),N([u,v]),0])/2
  ; 
Field2 := R^3->R^3
  : [u,v,t] -> ([u,v,0]) + scale*(.5+t/2)*([M([u,v]),N([u,v]),0])
  ; 

widget type<-`vobject, parent<-`pic, 
	set<-( Axes ), color<-"blue"

widget type<-`vobject, parent<-`pic, 
	set<-( Field1( FDom ) ), color<-"orange";
widget type<-`vobject, parent<-`pic, 
	set<-( Field2( FDom ) ), color<-"red";

/**********************************************************************
 * The Curve of integration is defined here 
 **********************************************************************/
Cdom := Interval( 0, 2pi, 101);
	

disx := widget Slider( -2,2), init<-0, name<-"center of circle: x";
disy := widget Slider( -2,2), init<-0, name<-"center of circle: y";
c := widget Slider( 0, 2 ), init<-1, name<-"ratio of axes for ellipse";

curve := R -> R^2
      : t -> [cos(t),c* sin(t)] + [disx,disy]
      ;


widget type<-`vobject, parent<-`pic, 
	set<-( curve(Cdom) ), color<-"blue";

scurve := R -> R^3
       : t -> [curve(t)^1, curve(t)^2, 
	 	(N(curve(t)))*(curve'(t)^1) +    /* Ndx */
	        (M(curve(t)))*(curve'(t)^2)       /* Mdx */
	      ]
       ;

widget type<-`vobject, parent<-`pic, 
	set<-( scurve(Cdom) ), color<-"green";


waveDom := [sample(Cdom) >< interval(0,1,2)];

wave := R^2 -> R^3
     : [t,h] -> (1-h)*[curve(t)^1, curve(t)^2, 0] +
		(h) * scurve(t)
     ;

widget type<-`vobject, parent<-`pic, 
	set<-( wave(waveDom) ), color<-"yellow";


flatwave := R -> R^2
	: t -> [t, scurve(t)^3]
	;

widget type<-`vobject,
	set<-( flatwave(Cdom) union Axes ),
   name<-"value of integrand vs t"
   ;	

val := (SumReduce( {x in flatwave(Cdom) | x^1 > 0} )* 2pi/100)^2;

winA := widget Window(1), name<-"output", 
     height<-100, width<-300;

widget Print( val if val*val > .00001 else 0.0 ),
   name<-"Value of the line integral",
   parent<-`winA, 
   Location( 0, 0, 1, 1);


win := widget Window( 2 ), name<-"Description",
    height<-200, width<-360;

widget Button, name<-"A line integral over a vector
field with a singularity at the origin.", 
   parent<-`win,
   Location( 0, 0, 1, 2);

widget Button, name<-"The integral is 2pi when the origin is
contained, otherwise it is 0",
   parent<-`win, 
   Location( 1, 0, 2, 2);

