/****************************************************************
 *
 * Copyright 1990, Brown University, Providence, RI
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 ****************************************************************/
/* 

   Domains of double integrals demo
   Works for the form 
            b_     _d(z) _n(y,z)
            /     /     /
            |     |     | f(x,y,z)  dx dy dz
           _/    _/    _/
            a     c(z)  m(y,z)

 
 **********************************************************************/

/***********************************************************************
 * Some handy positioning constants 
 */
nunits := 6;
half := 3;
third := 2;
quart := 1;

/***********************************************************************
 * Define Function/Domain definition inputs
 */
inpt :=
   widget type<-`window, 
   name<-"[a,b][c(z),d(z)][m(y,z),n(yz)] f(x,y) dx dy dz",
   width<-800,height<-300, numUnits<-nunits;


b := widget TypeIn, field<-R, name<-"b := R :", init<-"1", 
        parent<-`inpt, 
        top<-0, left<-0, bottom<-1, right<-third;
a := widget TypeIn, field<-R, name<-"a := R :", init<-"0", 
        parent<-`inpt, 
        top<-1, left<-0, bottom<-2, right<-third;

dz := widget TypeIn, field<-Maps, name<-"d(z) := R->R :", init<-"z -> 1",
        parent<-`inpt, 
        top<-0, left<-third, bottom<-1, right<-2*third;
cz := widget TypeIn, field<-Maps, name<-"c(z) := R->R :", init<-"z -> 0",
        parent<-`inpt, 
        top<-1, left<-third, bottom<-2, right<-2*third;

nyz := 
  widget TypeIn, field<-type(R^2->R), name<-"n(y,z) := R^2->R :", 
  parent<-`inpt, init<-"[y,z] -> 1",
  top<-0, left<-2*third, bottom<-1, right<-nunits;

myz := 
  widget TypeIn, field<-type(R^2->R), name<-"m(y,z) := R^2->R :", 
  parent<-`inpt, init<-"[y,z] -> 0",
  top<-1, left<-2*third, bottom<-2, right<-nunits;


xres := widget Slider(0,50), field<-Z, name<-"X res := Z :",
        drag<-False, init<-4,
        parent<-`inpt, 
        top<-2, left<-0, bottom<-4, right<-third;

yres := widget Slider(0,50), field<-Z, name<-"Y res := Z :",
        drag<-False, init<-4,
        parent<-`inpt, 
        top<-2, left<-third, bottom<-4, right<-2*third;

zres := widget Slider(0,50), field<-Z, name<-"Z res := Z :",
        drag<-False, init<-4,
        parent<-`inpt, 
        top<-2, left<-2*third, bottom<-4, right<-nunits;


doaxes := widget CheckBox, init<-True, parent<-`inpt, name<-"Axes",
        top<-4, left<-0, bottom<-5, right<-third;

/*dofunct := widget CheckBox, init<-False, parent<-`inpt, name<-"Function",
        top<-4, left<-third, bottom<-5, right<-2*third;
*/

domsolid := widget CheckBox, init<-False, parent<-`inpt, name<-"Solid",
        top<-4, left<-2*third, bottom<-5, right<-nunits;

/*
fxyz := widget TypeIn, field<-type(R^2->R), name<-"f := R^3 -> R :", 
        init<-"[x,y,z]-> x**2 - y**2 + z**2",
        parent<-`inpt, 
        top<-5, left<-0, bottom<-6, right<-nunits;
*/

/**********************************************************************
 * define the domain 
 */

Xinfo := ( 0.0, 1.0, xres );
Yinfo := ( 0.0, 1.0, yres );
Zinfo := ( a, b, zres );

Domain := [interval(0,1,yres) >< interval(0,1,xres) >< 
            sample(Interval(a,b,zres))];
sDomain := [interval(0,1,yres) >< interval(0,1,xres) >< 
            Interval(a,b,zres)];

domDomain := sDomain if domsolid = True else Domain;

/**********************************************************************
 * define the map
 */

PlMap := R^3 -> R^3
   : [y,x,z] -> (x)[ myz([y,z]), y, z]   +  (1-x)[nyz([y,z]),y, z ]  
   ;


/*ZMap := R^3 -> R^3
     : [y,x,z] -> (y)PlMap( [cz(z),x,z] ) + (1-y)PlMap( [dz(z),x,z] )
     ;
*/
ZMap := R^3 -> R^3
     : [y,x,z] -> [     x*myz([y*cz(z) + (1-y)*dz(z),z]) +
     				(1-x)*nyz([y*cz(z) + (1-y)*dz(z),z]),
     			y*cz(z) + (1-y)*dz(z),
     			z
     		  ]
     ;

/**********************************************************************
 * define the function 
 */

/*funct := R^2 -> R^3
   : v -> [ v^1, v^2, fuv(v) ]
   ;
*/

/**********************************************************************
 * Create the output window and add some of our niceties
 **********************************************************************/

ViewWindow := widget type<-`view, name<-"f(x,y) dx dy";

/* add axes option */
widget type<-`vobject, parent<-`ViewWindow, color<-"green",
   set<-( Axes if doaxes = True else  {} );

widget type<-`vobject, parent<-`ViewWindow, color<-"white",
   set<-( Labels if doaxes = True else {});


/* add domain */
widget type<-`vobject, parent<-`ViewWindow, color<-"red",
   set<-( ZMap(domDomain) );

/* ad range */
/*widget type<-`vobject, parent<-`ViewWindow, color<-"blue",
   set<-( funct(IntMap(sDomain)) if dofunct = True else {[0,0,0]} );
*/   


