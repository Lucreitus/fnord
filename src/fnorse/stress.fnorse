/**********************************************************************
 * Copyright 1990, Brown University, Providence, RI
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 **********************************************************************/
/* $Id: stress.fnorse,v 1.8 1993/06/01 19:23:41 rch Exp $ */


f := R -> {R} : x -> interval(0, x);
h := R -> {R} : x -> interval(x, x+1);
s := R -> {R} : x -> {x} ;
g := R -> R   : x -> square(x) ;

I := interval(0, 1);

print g(2);
print g(I);

print f(1);
print f(I);

print s(1);
print s(I);

print h(1);
print h(I);

print ([x -> x, x -> sin(x)]^1)(1);

f := ? -> (? -> ?) : t -> (x -> (t : x)) ;
print f(type R)(1);


map := (f, list) ->
   (map(f, left(list)), f(right(list)))
         if typematchx(list, (?, ?)) else
   f(list) ;
L := (1, 2, 3, 7, 1);
print map(x->x+1, L);

accum := (f, init, list) ->
   f(accum(f, init, left(list)), right(list))if typematchx(list, (?, ?)) else
  f(init, list);
print accum((a,b)->a+b, 0, L);
print accum((a,b)->a*b, 1, L);

fact := Z -> R
     :  n -> accum((a,b)->a*b, (R:1), (1..n))
     ;

print fact(20);

fact2 := Z -> R
      :  n -> reduce({R}:{3..n},(a,b)->a*b, 2)
      ;

print fact2(50);

print sin({} >< {});


SlowGCD := (Z, Z) -> Z
    :  (a, b) -> a if b = 0 else
                 SlowGCD(a, b - a) if b > a else
                 SlowGCD(b, a - b)
    ;

print SlowGCD(75648, 66768);


print polynomial(1.2, polynomial(1.1, [[1, 2, 3], [2, -3, -4]]));
